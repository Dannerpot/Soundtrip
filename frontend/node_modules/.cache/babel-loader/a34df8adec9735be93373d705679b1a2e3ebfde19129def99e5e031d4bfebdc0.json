{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soma ict\\\\soundtrip\\\\frontend\\\\src\\\\components\\\\SongInputForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SongInputForm = ({\n  onSubmit\n}) => {\n  _s();\n  const [songs, setSongs] = useState(['', '', '']);\n  const [searchResults, setSearchResults] = useState([[], [], []]); // Holds the dropdown results for each input field\n\n  // Function to call Spotify Search API\n  const searchSpotify = async (query, index) => {\n    if (!query) {\n      setSearchResults(prevResults => {\n        const newResults = [...prevResults];\n        newResults[index] = []; // Clear the dropdown for that input\n        return newResults;\n      });\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:5000/search?q=${query}`);\n      const data = await response.json();\n      setSearchResults(prevResults => {\n        const newResults = [...prevResults];\n        newResults[index] = data.tracks; // Store the track results for the input field\n        return newResults;\n      });\n    } catch (error) {\n      console.error('Error searching Spotify:', error);\n    }\n  };\n\n  // Handle song selection\n  const handleSongSelect = (songName, index) => {\n    setSongs(prevSongs => {\n      const newSongs = [...prevSongs];\n      newSongs[index] = songName;\n      return newSongs;\n    });\n    setSearchResults(prevResults => {\n      const newResults = [...prevResults];\n      newResults[index] = []; // Clear dropdown when a song is selected\n      return newResults;\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(songs); // Pass the selected songs to the parent component (App.js)\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [songs.map((song, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: song,\n        onChange: e => {\n          const newSongs = [...songs];\n          newSongs[index] = e.target.value;\n          setSongs(newSongs);\n          searchSpotify(e.target.value, index); // Search as the user types\n        },\n        placeholder: `Song ${index + 1}`,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), searchResults[index].length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          position: 'absolute',\n          top: '100%',\n          left: 0,\n          width: '100%',\n          zIndex: 1000\n        },\n        children: searchResults[index].map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleSongSelect(track.name, index),\n          style: {\n            cursor: 'pointer',\n            padding: '5px',\n            backgroundColor: '#fff',\n            border: '1px solid #ccc'\n          },\n          children: [track.name, \" - \", track.artists.map(artist => artist.name).join(', ')]\n        }, track.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      class: \"glow-on-hover\",\n      children: \"Get Recommendations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(SongInputForm, \"Qkka7KUvrPQnzBjF0VSQpiTaQ+g=\");\n_c = SongInputForm;\nexport default SongInputForm;\nvar _c;\n$RefreshReg$(_c, \"SongInputForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SongInputForm","onSubmit","_s","songs","setSongs","searchResults","setSearchResults","searchSpotify","query","index","prevResults","newResults","response","fetch","data","json","tracks","error","console","handleSongSelect","songName","prevSongs","newSongs","handleSubmit","e","preventDefault","children","map","song","style","position","type","value","onChange","target","placeholder","autoComplete","fileName","_jsxFileName","lineNumber","columnNumber","length","top","left","width","zIndex","track","onClick","name","cursor","padding","backgroundColor","border","artists","artist","join","id","class","_c","$RefreshReg$"],"sources":["C:/Users/soma ict/soundtrip/frontend/src/components/SongInputForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../App.css';\r\nconst SongInputForm = ({ onSubmit }) => {\r\n  const [songs, setSongs] = useState(['', '', '']);\r\n  const [searchResults, setSearchResults] = useState([[], [], []]);  // Holds the dropdown results for each input field\r\n\r\n  // Function to call Spotify Search API\r\n  const searchSpotify = async (query, index) => {\r\n    if (!query) {\r\n      setSearchResults((prevResults) => {\r\n        const newResults = [...prevResults];\r\n        newResults[index] = [];  // Clear the dropdown for that input\r\n        return newResults;\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/search?q=${query}`);\r\n      const data = await response.json();\r\n      setSearchResults((prevResults) => {\r\n        const newResults = [...prevResults];\r\n        newResults[index] = data.tracks;  // Store the track results for the input field\r\n        return newResults;\r\n      });\r\n    } catch (error) {\r\n      console.error('Error searching Spotify:', error);\r\n    }\r\n  };\r\n\r\n  // Handle song selection\r\n  const handleSongSelect = (songName, index) => {\r\n    setSongs((prevSongs) => {\r\n      const newSongs = [...prevSongs];\r\n      newSongs[index] = songName;\r\n      return newSongs;\r\n    });\r\n    setSearchResults((prevResults) => {\r\n      const newResults = [...prevResults];\r\n      newResults[index] = [];  // Clear dropdown when a song is selected\r\n      return newResults;\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit(songs);  // Pass the selected songs to the parent component (App.js)\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {songs.map((song, index) => (\r\n        <div key={index} style={{ position: 'relative' }}>\r\n          <input\r\n            type=\"text\"\r\n            value={song}\r\n            onChange={(e) => {\r\n              const newSongs = [...songs];\r\n              newSongs[index] = e.target.value;\r\n              setSongs(newSongs);\r\n              searchSpotify(e.target.value, index);  // Search as the user types\r\n            }}\r\n            placeholder={`Song ${index + 1}`}\r\n            autoComplete=\"off\"\r\n          />\r\n          {/* Dropdown for song suggestions */}\r\n          {searchResults[index].length > 0 && (\r\n            <ul style={{ position: 'absolute', top: '100%', left: 0, width: '100%', zIndex: 1000 }}>\r\n              {searchResults[index].map((track) => (\r\n                <li\r\n                  key={track.id}\r\n                  onClick={() => handleSongSelect(track.name, index)}\r\n                  style={{ cursor: 'pointer', padding: '5px', backgroundColor: '#fff', border: '1px solid #ccc' }}\r\n                >\r\n                  {track.name} - {track.artists.map(artist => artist.name).join(', ')}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n      ))}\r\n      <button type=\"submit\" class='glow-on-hover'>Get Recommendations</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SongInputForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACpB,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAChD,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAE;;EAEnE;EACA,MAAMU,aAAa,GAAG,MAAAA,CAAOC,KAAK,EAAEC,KAAK,KAAK;IAC5C,IAAI,CAACD,KAAK,EAAE;MACVF,gBAAgB,CAAEI,WAAW,IAAK;QAChC,MAAMC,UAAU,GAAG,CAAC,GAAGD,WAAW,CAAC;QACnCC,UAAU,CAACF,KAAK,CAAC,GAAG,EAAE,CAAC,CAAE;QACzB,OAAOE,UAAU;MACnB,CAAC,CAAC;MACF;IACF;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkCL,KAAK,EAAE,CAAC;MACvE,MAAMM,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCT,gBAAgB,CAAEI,WAAW,IAAK;QAChC,MAAMC,UAAU,GAAG,CAAC,GAAGD,WAAW,CAAC;QACnCC,UAAU,CAACF,KAAK,CAAC,GAAGK,IAAI,CAACE,MAAM,CAAC,CAAE;QAClC,OAAOL,UAAU;MACnB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;;EAED;EACA,MAAME,gBAAgB,GAAGA,CAACC,QAAQ,EAAEX,KAAK,KAAK;IAC5CL,QAAQ,CAAEiB,SAAS,IAAK;MACtB,MAAMC,QAAQ,GAAG,CAAC,GAAGD,SAAS,CAAC;MAC/BC,QAAQ,CAACb,KAAK,CAAC,GAAGW,QAAQ;MAC1B,OAAOE,QAAQ;IACjB,CAAC,CAAC;IACFhB,gBAAgB,CAAEI,WAAW,IAAK;MAChC,MAAMC,UAAU,GAAG,CAAC,GAAGD,WAAW,CAAC;MACnCC,UAAU,CAACF,KAAK,CAAC,GAAG,EAAE,CAAC,CAAE;MACzB,OAAOE,UAAU;IACnB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMY,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBxB,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAE;EACpB,CAAC;EAED,oBACEJ,OAAA;IAAME,QAAQ,EAAEsB,YAAa;IAAAG,QAAA,GAC1BvB,KAAK,CAACwB,GAAG,CAAC,CAACC,IAAI,EAAEnB,KAAK,kBACrBV,OAAA;MAAiB8B,KAAK,EAAE;QAAEC,QAAQ,EAAE;MAAW,CAAE;MAAAJ,QAAA,gBAC/C3B,OAAA;QACEgC,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEJ,IAAK;QACZK,QAAQ,EAAGT,CAAC,IAAK;UACf,MAAMF,QAAQ,GAAG,CAAC,GAAGnB,KAAK,CAAC;UAC3BmB,QAAQ,CAACb,KAAK,CAAC,GAAGe,CAAC,CAACU,MAAM,CAACF,KAAK;UAChC5B,QAAQ,CAACkB,QAAQ,CAAC;UAClBf,aAAa,CAACiB,CAAC,CAACU,MAAM,CAACF,KAAK,EAAEvB,KAAK,CAAC,CAAC,CAAE;QACzC,CAAE;QACF0B,WAAW,EAAE,QAAQ1B,KAAK,GAAG,CAAC,EAAG;QACjC2B,YAAY,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB,CAAC,EAEDnC,aAAa,CAACI,KAAK,CAAC,CAACgC,MAAM,GAAG,CAAC,iBAC9B1C,OAAA;QAAI8B,KAAK,EAAE;UAAEC,QAAQ,EAAE,UAAU;UAAEY,GAAG,EAAE,MAAM;UAAEC,IAAI,EAAE,CAAC;UAAEC,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAK,CAAE;QAAAnB,QAAA,EACpFrB,aAAa,CAACI,KAAK,CAAC,CAACkB,GAAG,CAAEmB,KAAK,iBAC9B/C,OAAA;UAEEgD,OAAO,EAAEA,CAAA,KAAM5B,gBAAgB,CAAC2B,KAAK,CAACE,IAAI,EAAEvC,KAAK,CAAE;UACnDoB,KAAK,EAAE;YAAEoB,MAAM,EAAE,SAAS;YAAEC,OAAO,EAAE,KAAK;YAAEC,eAAe,EAAE,MAAM;YAAEC,MAAM,EAAE;UAAiB,CAAE;UAAA1B,QAAA,GAE/FoB,KAAK,CAACE,IAAI,EAAC,KAAG,EAACF,KAAK,CAACO,OAAO,CAAC1B,GAAG,CAAC2B,MAAM,IAAIA,MAAM,CAACN,IAAI,CAAC,CAACO,IAAI,CAAC,IAAI,CAAC;QAAA,GAJ9DT,KAAK,CAACU,EAAE;UAAAnB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKX,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CACL;IAAA,GA1BO/B,KAAK;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OA2BV,CACN,CAAC,eACFzC,OAAA;MAAQgC,IAAI,EAAC,QAAQ;MAAC0B,KAAK,EAAC,eAAe;MAAA/B,QAAA,EAAC;IAAmB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpE,CAAC;AAEX,CAAC;AAACtC,EAAA,CAlFIF,aAAa;AAAA0D,EAAA,GAAb1D,aAAa;AAoFnB,eAAeA,aAAa;AAAC,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}